<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Transit Planner: src/Label.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Transit Planner
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">An experiment on transfer patterns robustness</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">src/Label.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2011: Eugen Sawin, Philip Stahl, Jonas Sternisko</span>
<a name="l00002"></a>00002 <span class="preprocessor">#ifndef SRC_LABEL_H_</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="preprocessor">#define SRC_LABEL_H_</span>
<a name="l00004"></a>00004 <span class="preprocessor"></span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;boost/serialization/access.hpp&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;climits&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;cassert&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;bitset&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="keyword">using</span> std::set;
<a name="l00015"></a>00015 <span class="keyword">using</span> std::string;
<a name="l00016"></a>00016 <span class="keyword">using</span> std::vector;
<a name="l00017"></a>00017 <span class="keyword">using</span> std::bitset;
<a name="l00018"></a>00018 <span class="keyword">using</span> std::min;
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 
<a name="l00021"></a><a class="code" href="classLabelVec.html">00021</a> <span class="keyword">class </span><a class="code" href="classLabelVec.html">LabelVec</a> {
<a name="l00022"></a>00022  <span class="keyword">public</span>:
<a name="l00023"></a><a class="code" href="structLabelVec_1_1Field.html">00023</a>   <span class="keyword">struct </span><a class="code" href="structLabelVec_1_1Field.html">Field</a> {
<a name="l00024"></a>00024     <a class="code" href="structLabelVec_1_1Field.html">Field</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty,
<a name="l00025"></a>00025           <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty)
<a name="l00026"></a>00026       : at(at), penalty(penalty), maxPenalty(maxPenalty), cost(0),
<a name="l00027"></a>00027         parent(NULL) {}
<a name="l00028"></a>00028 
<a name="l00029"></a>00029     <a class="code" href="structLabelVec_1_1Field.html">Field</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty,
<a name="l00030"></a>00030           <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost,
<a name="l00031"></a>00031           <span class="keyword">const</span> <span class="keywordtype">bool</span> walk, <span class="keyword">const</span> <span class="keywordtype">bool</span> inactive, <a class="code" href="structLabelVec_1_1Field.html">Field</a>* parent)
<a name="l00032"></a>00032       : at(at), penalty(penalty), maxPenalty(maxPenalty), cost(cost),
<a name="l00033"></a>00033         parent(parent) {
<a name="l00034"></a>00034       used(<span class="keyword">true</span>);
<a name="l00035"></a>00035       this-&gt;walk(walk);
<a name="l00036"></a>00036       this-&gt;inactive(inactive);
<a name="l00037"></a>00037     }
<a name="l00038"></a>00038 
<a name="l00039"></a>00039     <span class="keywordtype">bool</span> used()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _misc.test(0); }
<a name="l00040"></a>00040     <span class="keywordtype">bool</span> closed()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _misc.test(1); }
<a name="l00041"></a>00041     <span class="keywordtype">bool</span> inactive()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _misc.test(2); }
<a name="l00042"></a>00042     <span class="keywordtype">bool</span> walk()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _misc.test(3); }
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="keywordtype">void</span> used(<span class="keywordtype">bool</span> value) { _misc.set(0, value); }
<a name="l00045"></a>00045     <span class="keywordtype">void</span> closed(<span class="keywordtype">bool</span> value) { _misc.set(1, value); }
<a name="l00046"></a>00046     <span class="keywordtype">void</span> inactive(<span class="keywordtype">bool</span> value) { _misc.set(2, value); }
<a name="l00047"></a>00047     <span class="keywordtype">void</span> walk(<span class="keywordtype">bool</span> value) { _misc.set(3, value); }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keywordtype">int</span> at;
<a name="l00050"></a>00050     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty;
<a name="l00051"></a>00051     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty;
<a name="l00052"></a>00052     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost;
<a name="l00053"></a>00053     <a class="code" href="structLabelVec_1_1Field.html">Field</a>* parent;
<a name="l00054"></a>00054     bitset&lt;4&gt; _misc;  <span class="comment">// 0:used 1:closed 2:inactive 3:walk</span>
<a name="l00055"></a>00055   };
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="comment">// A label proxy interfacing with the internal structures of  LabelVec.</span>
<a name="l00058"></a><a class="code" href="classLabelVec_1_1Hnd.html">00058</a>   <span class="keyword">class </span><a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a> {
<a name="l00059"></a>00059    <span class="keyword">public</span>:
<a name="l00060"></a><a class="code" href="structLabelVec_1_1Hnd_1_1Comp.html">00060</a>     <span class="keyword">struct </span><a class="code" href="structLabelVec_1_1Hnd_1_1Comp.html">Comp</a> {
<a name="l00061"></a>00061       <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>&amp; rhs)<span class="keyword"> const </span>{
<a name="l00062"></a>00062         <span class="keywordflow">return</span> rhs &lt; lhs;
<a name="l00063"></a>00063       }
<a name="l00064"></a>00064     };
<a name="l00065"></a>00065 
<a name="l00066"></a>00066     <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>(<span class="keyword">const</span> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>&amp; rhs)
<a name="l00067"></a>00067       : _values(rhs._values),
<a name="l00068"></a>00068         _field(rhs._field),
<a name="l00069"></a>00069         _inactive(rhs._inactive) {
<a name="l00070"></a>00070       assert(at() == rhs.at());
<a name="l00071"></a>00071     }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>() : _values(0), _field(NULL), _inactive(false) {}
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     Hnd(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty, <span class="keywordtype">bool</span> inactive,
<a name="l00076"></a>00076         <a class="code" href="structLabelVec_1_1Field.html">LabelVec::Field</a>* field)
<a name="l00077"></a>00077       : _values((cost &lt;&lt; 8) | penalty), _field(field),
<a name="l00078"></a>00078         _inactive(inactive) {}
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     Hnd&amp; operator=(<span class="keyword">const</span> Hnd&amp; rhs) {
<a name="l00081"></a>00081       <span class="keywordflow">if</span> (<span class="keyword">this</span> == &amp;rhs) {
<a name="l00082"></a>00082         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00083"></a>00083       }
<a name="l00084"></a>00084       _values = rhs._values;
<a name="l00085"></a>00085       _field = rhs._field;
<a name="l00086"></a>00086       _inactive = rhs._inactive;
<a name="l00087"></a>00087       <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> Hnd&amp; rhs)<span class="keyword"> const </span>{
<a name="l00091"></a>00091       <span class="keywordflow">return</span> _values &gt; rhs._values;
<a name="l00092"></a>00092     }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> Hnd&amp; rhs)<span class="keyword"> const </span>{
<a name="l00095"></a>00095       <span class="keywordflow">return</span> _values &lt; rhs._values;
<a name="l00096"></a>00096     }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     <span class="comment">// Implicit bool conversion showing whether the label is valid.</span>
<a name="l00099"></a>00099     operator bool()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> valid(); }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101     <span class="comment">// Returns whether the label is valid. This is used for terminating</span>
<a name="l00102"></a>00102     <span class="comment">// tracebacks of optimal paths.</span>
<a name="l00103"></a>00103     <span class="keywordtype">bool</span> valid()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field; }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _values &gt;&gt; 8; }
<a name="l00106"></a>00106     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _values &amp; 0xff; }
<a name="l00107"></a>00107     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field-&gt;maxPenalty; }
<a name="l00108"></a>00108     <span class="keywordtype">int</span> at()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field-&gt;at; }
<a name="l00109"></a>00109     <span class="keywordtype">bool</span> closed()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field-&gt;closed(); }
<a name="l00110"></a>00110     <span class="keywordtype">bool</span> inactive()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _inactive; }
<a name="l00111"></a>00111     <span class="keywordtype">bool</span> walk()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field-&gt;walk(); }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="keywordtype">void</span> inactive(<span class="keywordtype">bool</span> value) { _inactive = value; }
<a name="l00114"></a>00114     <span class="keywordtype">void</span> closed(<span class="keywordtype">bool</span> value) { _field-&gt;closed(value); }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     Field* field()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _field; }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118    <span class="keyword">private</span>:
<a name="l00119"></a>00119     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _values;
<a name="l00120"></a>00120     Field* _field;
<a name="l00121"></a>00121     <span class="keywordtype">bool</span> _inactive;
<a name="l00122"></a>00122   };
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="keyword">typedef</span> vector&lt;Hnd&gt;::const_iterator const_iterator;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <a class="code" href="classLabelVec.html">LabelVec</a>();
<a name="l00127"></a>00127   <a class="code" href="classLabelVec.html">LabelVec</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   const_iterator begin() <span class="keyword">const</span>;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   const_iterator end() <span class="keyword">const</span>;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="comment">// Returns whether the cost, penalty pair is optimal within the vector.</span>
<a name="l00134"></a>00134   <span class="keywordtype">bool</span> candidate(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty) <span class="keyword">const</span>;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="comment">// Adds a new label, possibly overwritting the old label with same penalty.</span>
<a name="l00137"></a>00137   Field* add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty,
<a name="l00138"></a>00138              <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty,
<a name="l00139"></a>00139              <span class="keyword">const</span> <span class="keywordtype">bool</span> walk, <span class="keyword">const</span> <span class="keywordtype">bool</span> inactive, Field* parent);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="keywordtype">void</span> add(<span class="keyword">const</span> Hnd&amp; label, <span class="keyword">const</span> Hnd&amp; parent);
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="comment">// Returns const reference to the field at given penalty.</span>
<a name="l00144"></a>00144   <span class="keyword">const</span> Field&amp; field(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty) <span class="keyword">const</span>;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <span class="comment">// Removes all inactive labels.</span>
<a name="l00147"></a>00147   <span class="keywordtype">int</span> pruneInactive();
<a name="l00148"></a>00148 
<a name="l00149"></a>00149   <span class="comment">// Returns the vector size, which equals to the max penalty + 1.</span>
<a name="l00150"></a>00150   <span class="keywordtype">int</span> size() <span class="keyword">const</span>;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="comment">// Returns the minimum cost value of all labels.</span>
<a name="l00153"></a>00153   <span class="keywordtype">int</span> minCost() <span class="keyword">const</span>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">// Returns the minimum penalty value of all labels.</span>
<a name="l00156"></a>00156   <span class="keywordtype">int</span> minPenalty() <span class="keyword">const</span>;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   <span class="comment">// Returns the node index at which this labels are connected.</span>
<a name="l00159"></a>00159   <span class="keywordtype">int</span> at() <span class="keyword">const</span>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   <span class="comment">// Sets the inactive value to true</span>
<a name="l00162"></a>00162   <span class="comment">// for all labels which are worse the given cost and penalty</span>
<a name="l00163"></a>00163   <span class="keywordtype">void</span> deactivate(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165  <span class="keyword">private</span>:
<a name="l00166"></a>00166   <span class="keywordtype">int</span> _at;
<a name="l00167"></a>00167   <span class="keywordtype">int</span> _numUsed;
<a name="l00168"></a>00168   vector&lt;Field&gt; _fields;
<a name="l00169"></a>00169   <span class="keyword">mutable</span> <span class="keywordtype">bool</span> _updated;
<a name="l00170"></a>00170   <span class="keyword">mutable</span> vector&lt;Hnd&gt; _bakedLabels;
<a name="l00171"></a>00171 };
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="comment">// Holds a label vector for each node and ways to operate on them.</span>
<a name="l00174"></a><a class="code" href="classLabelMatrix.html">00174</a> <span class="keyword">class </span><a class="code" href="classLabelMatrix.html">LabelMatrix</a> {
<a name="l00175"></a>00175  <span class="keyword">public</span>:
<a name="l00176"></a>00176   <span class="keyword">typedef</span> <a class="code" href="classLabelVec_1_1Hnd.html">LabelVec::Hnd</a> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>;
<a name="l00177"></a>00177   <span class="keyword">typedef</span> vector&lt;LabelVec&gt;::const_iterator const_iterator;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179   <span class="comment">// Resizes the matrix given the number of nodes and max penalty.</span>
<a name="l00180"></a>00180   <span class="comment">// Resizing deletes all previous labels.</span>
<a name="l00181"></a>00181   <span class="keywordtype">void</span> resize(<span class="keyword">const</span> <span class="keywordtype">int</span> numNodes, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty);
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">// Returns whether given cost, penalty pair is optimal for given node id.</span>
<a name="l00184"></a>00184   <span class="keywordtype">bool</span> candidate(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty) <span class="keyword">const</span>;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">// Returns whether there is a label with given penalty for given node id.</span>
<a name="l00187"></a>00187   <span class="keywordtype">bool</span> contains(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty) <span class="keyword">const</span>;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189   <span class="comment">// Returns whether the label at given node id and penalty is set closed.</span>
<a name="l00190"></a>00190   <span class="keywordtype">bool</span> closed(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty) <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192   <span class="comment">// This is a specialisation for adding labels without parent labels.</span>
<a name="l00193"></a>00193   <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a> add(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty,
<a name="l00194"></a>00194           <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty);
<a name="l00195"></a>00195 
<a name="l00196"></a>00196   <span class="comment">// Adds a successor label for given node id with given cost and penalty.</span>
<a name="l00197"></a>00197   <span class="comment">// Returns a label proxy for the newly created label data.</span>
<a name="l00198"></a>00198   <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a> add(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty,
<a name="l00199"></a>00199           <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> maxPenalty, <span class="keyword">const</span> <span class="keywordtype">bool</span> walk, <span class="keyword">const</span> <span class="keywordtype">bool</span> inactive,
<a name="l00200"></a>00200           <span class="keyword">const</span> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>&amp; parent);
<a name="l00201"></a>00201 
<a name="l00202"></a>00202   <span class="comment">// Removes all inactive labels.</span>
<a name="l00203"></a>00203   <span class="comment">// Returns the number of labels removed.</span>
<a name="l00204"></a>00204   <span class="keywordtype">int</span> pruneInactive();
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <span class="comment">// Returns the parent label proxy for given successor label.</span>
<a name="l00207"></a>00207   <span class="comment">// If no parent is available it returns an invalid label.</span>
<a name="l00208"></a>00208   <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a> parent(<span class="keyword">const</span> <a class="code" href="classLabelVec_1_1Hnd.html">Hnd</a>&amp; succ) <span class="keyword">const</span>;
<a name="l00209"></a>00209 
<a name="l00210"></a>00210   <span class="comment">// Returns a const reference to the label vector for given node index.</span>
<a name="l00211"></a>00211   <span class="keyword">const</span> <a class="code" href="classLabelVec.html">LabelVec</a>&amp; at(<span class="keyword">const</span> <span class="keywordtype">int</span> at) <span class="keyword">const</span>;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">// Returns a reference to the label vector for given node index.</span>
<a name="l00214"></a>00214   <a class="code" href="classLabelVec.html">LabelVec</a>&amp; at(<span class="keyword">const</span> <span class="keywordtype">int</span> at);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   <span class="comment">// Sets the inactive value to true for all labels at the given node</span>
<a name="l00217"></a>00217   <span class="comment">// which are worse the given cost and penalty. Used by arrival loop.</span>
<a name="l00218"></a>00218   <span class="keywordtype">void</span> deactivate(<span class="keyword">const</span> <span class="keywordtype">int</span> at, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cost,
<a name="l00219"></a>00219                                 <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> penalty);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   const_iterator cbegin() <span class="keyword">const</span>;
<a name="l00223"></a>00223   const_iterator cend() <span class="keyword">const</span>;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">// Returns the size of the matrix, which equals to the number of label vectors</span>
<a name="l00226"></a>00226   <span class="comment">// it serves.</span>
<a name="l00227"></a>00227   <span class="keywordtype">int</span> size() <span class="keyword">const</span>;
<a name="l00228"></a>00228 
<a name="l00229"></a>00229   <span class="keywordtype">int</span> numLabels() <span class="keyword">const</span>;
<a name="l00230"></a>00230 
<a name="l00231"></a>00231  <span class="keyword">private</span>:
<a name="l00232"></a>00232   vector&lt;LabelVec&gt; _matrix;
<a name="l00233"></a>00233 };
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="preprocessor">#endif  // SRC_LABEL_H_</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sat Aug 4 2012 05:25:42 for Transit Planner by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
