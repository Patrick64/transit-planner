<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Transit Planner: src/Utilities.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Transit Planner
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">An experiment on transfer patterns robustness</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">src/Utilities.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2011: Eugen Sawin, Philip Stahl, Jonas Sternisko</span>
<a name="l00002"></a>00002 <span class="preprocessor">#ifndef SRC_UTILITIES_H_</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="preprocessor">#define SRC_UTILITIES_H_</span>
<a name="l00004"></a>00004 <span class="preprocessor"></span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="comment">// For formatting ASCII output.</span>
<a name="l00012"></a>00012 <span class="preprocessor">#define BOLD     &quot;\033[1m&quot;</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span><span class="preprocessor">#define BLACK    &quot;\033[30m&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor"></span><span class="preprocessor">#define RED      &quot;\033[31m&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><span class="preprocessor">#define GREEN    &quot;\033[32m&quot;</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#define BROWN    &quot;\033[33m&quot;</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#define BLUE     &quot;\033[34m&quot;</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define RESET    &quot;\033[0m&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// Use global Logger LOG instead.</span>
<a name="l00022"></a>00022 <span class="comment">/*#define PARSER     GREEN &lt;&lt; &quot;[Parser    ] &quot; &lt;&lt; RESET</span>
<a name="l00023"></a>00023 <span class="comment">#define PRECOMP    GREEN &lt;&lt; &quot;[Prepare   ] &quot; &lt;&lt; RESET</span>
<a name="l00024"></a>00024 <span class="comment">#define EXPERIMENT GREEN &lt;&lt; &quot;[Experiment] &quot; &lt;&lt; RESET</span>
<a name="l00025"></a>00025 <span class="comment">#define RESULTS    GREEN &lt;&lt; &quot;[Results   ] &quot; &lt;&lt; RESET*/</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">using</span> std::set;
<a name="l00028"></a>00028 <span class="keyword">using</span> std::map;
<a name="l00029"></a>00029 <span class="keyword">using</span> std::vector;
<a name="l00030"></a>00030 <span class="keyword">using</span> std::pair;
<a name="l00031"></a>00031 <span class="keyword">using</span> std::string;
<a name="l00032"></a>00032 <span class="keyword">using</span> std::stringstream;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">typedef</span> map&lt;string, string&gt; StrStrMap;
<a name="l00035"></a>00035 <span class="keyword">typedef</span> pair&lt;int, int&gt; IntPair;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">const</span> <span class="keywordtype">int</span> kSecondsPerDay = 86400;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">// Converts variable a from its type A to type B.</span>
<a name="l00040"></a>00040 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> B, <span class="keyword">typename</span> A&gt;
<a name="l00041"></a>00041     B convert(<span class="keyword">const</span> A&amp; a) {
<a name="l00042"></a>00042   B b;
<a name="l00043"></a>00043   stringstream ss;
<a name="l00044"></a>00044   ss &lt;&lt; a;
<a name="l00045"></a>00045   ss &gt;&gt; b;
<a name="l00046"></a>00046   <span class="keywordflow">return</span> b;
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">// Map search with inline type conversion.</span>
<a name="l00050"></a>00050 <span class="comment">// Returns whether the key was found in the map.</span>
<a name="l00051"></a>00051 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> A, <span class="keyword">typename</span> B, <span class="keyword">typename</span> C&gt;
<a name="l00052"></a>00052     <span class="keywordtype">bool</span> found(<span class="keyword">const</span> map&lt;A, B&gt;&amp; m, <span class="keyword">const</span> A&amp; key, C&amp; value) {
<a name="l00053"></a>00053   <span class="keyword">const</span> <span class="keyword">typename</span> map&lt;A, B&gt;::const_iterator iter = m.find(key);
<a name="l00054"></a>00054   <span class="keyword">const</span> <span class="keywordtype">bool</span> foundit = iter != m.end();
<a name="l00055"></a>00055   <span class="keywordflow">if</span> (foundit) {
<a name="l00056"></a>00056     value = convert&lt;C&gt;(iter-&gt;second);
<a name="l00057"></a>00057   }
<a name="l00058"></a>00058   <span class="keywordflow">return</span> foundit;
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="comment">// Initialises a map with given value for given key iff key is not contained</span>
<a name="l00062"></a>00062 <span class="comment">// in the map.</span>
<a name="l00063"></a>00063 <span class="comment">// Returns whether true if the map was initialised with the value for the key</span>
<a name="l00064"></a>00064 <span class="comment">// and false if the key was already contained within the map.</span>
<a name="l00065"></a>00065 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;
<a name="l00066"></a>00066 <span class="keywordtype">bool</span> safeInit(map&lt;K, V&gt;&amp; c, <span class="keyword">const</span> K&amp; k, <span class="keyword">const</span> V&amp; v) {
<a name="l00067"></a>00067   <span class="keywordflow">if</span> (c.find(k) == c.end()) {
<a name="l00068"></a>00068     c[k] = v;
<a name="l00069"></a>00069     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00070"></a>00070   }
<a name="l00071"></a>00071   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">// Inserts a value into the container found in the map at given key.</span>
<a name="l00075"></a>00075 <span class="comment">// If there is no container in the map at that key, it creates new container</span>
<a name="l00076"></a>00076 <span class="comment">// at given key and inserts the value into it.</span>
<a name="l00077"></a>00077 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">class</span> Container&gt;
<a name="l00078"></a>00078 <span class="keywordtype">void</span> safeInsert(map&lt;K, Container&gt;&amp; c, <span class="keyword">const</span> K&amp; k, <span class="keyword">const</span> V&amp; v) {
<a name="l00079"></a>00079   <span class="keyword">typename</span> map&lt;K, Container&gt;::iterator it = c.find(k);
<a name="l00080"></a>00080   <span class="keywordflow">if</span> (it == c.end()) {
<a name="l00081"></a>00081     Container&amp; value = (c[k] = Container());
<a name="l00082"></a>00082     value.insert(v);
<a name="l00083"></a>00083   } <span class="keywordflow">else</span> {
<a name="l00084"></a>00084     it-&gt;second.insert(v);
<a name="l00085"></a>00085   }
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Container&gt;
<a name="l00089"></a>00089 <span class="keywordtype">bool</span> contains(<span class="keyword">const</span> Container&amp; c, <span class="keyword">const</span> T&amp; key) {
<a name="l00090"></a>00090   <span class="keywordflow">return</span> c.find(key) != c.end();
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00094"></a>00094 <span class="keywordtype">bool</span> contains(<span class="keyword">const</span> vector&lt;T&gt;&amp; c, <span class="keyword">const</span> T&amp; item) {
<a name="l00095"></a>00095   <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.begin(); it != c.end(); ++it) {
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (*it == item) {
<a name="l00097"></a>00097       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">// Returns a formatted time string.</span>
<a name="l00104"></a>00104 <span class="keywordtype">string</span> formatPerfTime(<span class="keyword">const</span> <span class="keywordtype">double</span> s);
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">// Retuns all directories listed under path.</span>
<a name="l00107"></a>00107 vector&lt;string&gt; listDirs(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="comment">// Returns whether the file exists.</span>
<a name="l00110"></a>00110 <span class="keywordtype">bool</span> fileExists(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="comment">// Returns the file size.</span>
<a name="l00113"></a>00113 <span class="keywordtype">int</span> fileSize(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="comment">// Reads the whole file into a string.</span>
<a name="l00116"></a>00116 <span class="comment">// Remark: do not use it for big files.</span>
<a name="l00117"></a>00117 <span class="keywordtype">string</span> readFile(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="comment">// checks whether a string is a valid time string to be converted with str2time</span>
<a name="l00120"></a>00120 <span class="keywordtype">bool</span> isValidTimeString(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="comment">// Converts a timestring of format yyyymmddThhmmss into seconds since 1970.</span>
<a name="l00123"></a>00123 int64_t str2time(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment">// Converts a number of seconds into the iso format string yyyymmddThhmmss.</span>
<a name="l00126"></a>00126 <span class="keywordtype">string</span> time2str(<span class="keyword">const</span> int64_t time);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">// Gets the weekday for a date given by seconds since 1.1.1970</span>
<a name="l00129"></a>00129 <span class="keywordtype">string</span> getWeekday(<span class="keyword">const</span> int64_t time);
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="comment">// Considers TIME as a date specified by seconds since 1970. Gets the offset in</span>
<a name="l00132"></a>00132 <span class="comment">// seconds between 0:00:00 at this date and 1.1.1970.</span>
<a name="l00133"></a>00133 int64_t getDateOffsetSeconds(<span class="keyword">const</span> int64_t time);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">// Returns the local time in seconds since 1970.</span>
<a name="l00136"></a>00136 int64_t localTime();
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">// Returns a seed (usually localtime) for random number generation.</span>
<a name="l00139"></a>00139 int64_t getSeed();
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">// Returns the first of may localTime at 0:00.</span>
<a name="l00142"></a>00142 int64_t firstOfMay();
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">// Computes and returns the great circle distance between two positions on the</span>
<a name="l00145"></a>00145 <span class="comment">// globe in meters.</span>
<a name="l00146"></a>00146 <span class="keywordtype">float</span> greatCircleDistance(<span class="keyword">const</span> <span class="keywordtype">float</span> latitude1, <span class="keyword">const</span> <span class="keywordtype">float</span> longitude1,
<a name="l00147"></a>00147                           <span class="keyword">const</span> <span class="keywordtype">float</span> latitude2, <span class="keyword">const</span> <span class="keywordtype">float</span> longitude2);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">// Writes a set of transfer patterns to stdout.</span>
<a name="l00150"></a>00150 <span class="keywordtype">void</span> printTransferPatterns(<span class="keyword">const</span> <span class="keyword">set</span>&lt;vector&lt;int&gt; &gt;&amp; patterns);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <span class="comment">// Splits a string at whitespaces.</span>
<a name="l00153"></a>00153 vector&lt;string&gt; splitString(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; content);
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="preprocessor">#endif  // SRC_UTILITIES_H_</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sat Aug 4 2012 05:25:42 for Transit Planner by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
