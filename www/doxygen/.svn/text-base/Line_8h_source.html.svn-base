<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Transit Planner: src/Line.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Transit Planner
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">An experiment on transfer patterns robustness</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">src/Line.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">// Copyright 2011: Eugen Sawin, Philip Stahl, Jonas Sternisko</span>
<a name="l00002"></a>00002 <span class="preprocessor">#ifndef SRC_LINE_H_</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="preprocessor">#define SRC_LINE_H_</span>
<a name="l00004"></a>00004 <span class="preprocessor"></span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;boost/serialization/access.hpp&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;boost/serialization/set.hpp&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;boost/serialization/utility.hpp&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;utility&gt;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="keyword">using</span> std::string;
<a name="l00014"></a>00014 <span class="keyword">using</span> std::set;
<a name="l00015"></a>00015 <span class="keyword">using</span> std::vector;
<a name="l00016"></a>00016 <span class="keyword">using</span> std::pair;
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keyword">typedef</span> pair&lt;int64_t, int64_t&gt; Int64Pair;
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="comment">// Time table for a trip.</span>
<a name="l00021"></a><a class="code" href="classTripTime.html">00021</a> <span class="keyword">class </span><a class="code" href="classTripTime.html">TripTime</a> {
<a name="l00022"></a>00022  <span class="keyword">public</span>:
<a name="l00023"></a>00023   <span class="comment">// Comparison operator used for sorting by first departure time.</span>
<a name="l00024"></a>00024   <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="classTripTime.html">TripTime</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00025"></a>00025   <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="classTripTime.html">TripTime</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027   <span class="comment">// Returns the arrival time for given stop position.</span>
<a name="l00028"></a>00028   int64_t arr(<span class="keyword">const</span> <span class="keywordtype">int</span> pos) <span class="keyword">const</span>;
<a name="l00029"></a>00029 
<a name="l00030"></a>00030   <span class="comment">// Returns the departure time for given stop position.</span>
<a name="l00031"></a>00031   int64_t dep(<span class="keyword">const</span> <span class="keywordtype">int</span> pos) <span class="keyword">const</span>;
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   <span class="comment">// Returns the number of stop times.</span>
<a name="l00034"></a>00034   <span class="keywordtype">int</span> size() <span class="keyword">const</span>;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">// Adds a stop time to the time table.</span>
<a name="l00037"></a>00037   <span class="keywordtype">void</span> addStopTime(<span class="keyword">const</span> int64_t arrTime, <span class="keyword">const</span> int64_t depTime);
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="comment">// Returns a write reference to the last element.</span>
<a name="l00040"></a>00040   Int64Pair&amp; back();
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   <span class="comment">// Returns a string representation of the time table.</span>
<a name="l00043"></a>00043   <span class="keywordtype">string</span> str() <span class="keyword">const</span>;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045  <span class="keyword">private</span>:
<a name="l00046"></a>00046   <span class="comment">// departure, arrival time tuples</span>
<a name="l00047"></a>00047   vector&lt;Int64Pair&gt; _times;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="comment">// serialization</span>
<a name="l00050"></a>00050   <span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;
<a name="l00051"></a>00051   <span class="keywordtype">void</span> serialize(Archive&amp; ar, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> version) {  <span class="comment">// NOLINT</span>
<a name="l00052"></a>00052     ar &amp; _times;
<a name="l00053"></a>00053   }
<a name="l00054"></a>00054   <span class="keyword">friend</span> <span class="keyword">class </span>boost::serialization::access;
<a name="l00055"></a>00055 };
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">// A trip is a sequence of stops without transfers.</span>
<a name="l00058"></a>00058 <span class="comment">// It consists of a time table with corresponding stop indices.</span>
<a name="l00059"></a><a class="code" href="classTrip.html">00059</a> <span class="keyword">class </span><a class="code" href="classTrip.html">Trip</a> {
<a name="l00060"></a>00060  <span class="keyword">public</span>:
<a name="l00061"></a>00061   <span class="keyword">explicit</span> <a class="code" href="classTrip.html">Trip</a>();
<a name="l00062"></a>00062   <span class="keyword">explicit</span> <a class="code" href="classTrip.html">Trip</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <span class="keywordtype">id</span>);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="classTrip.html">Trip</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">// Returns the number of stops on the trip.</span>
<a name="l00067"></a>00067   <span class="keywordtype">int</span> size() <span class="keyword">const</span>;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="comment">// Adds a stop to the trip.</span>
<a name="l00070"></a>00070   <span class="keywordtype">void</span> addStop(<span class="keyword">const</span> int64_t arrTime, <span class="keyword">const</span> int64_t depTime, <span class="keyword">const</span> <span class="keywordtype">int</span> stop);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">// Returns stop index at given stop sequence.</span>
<a name="l00073"></a>00073   <span class="keywordtype">int</span> stop(<span class="keyword">const</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="comment">// Returns a const reference to the stop indices.</span>
<a name="l00076"></a>00076   <span class="keyword">const</span> vector&lt;int&gt;&amp; stops() <span class="keyword">const</span>;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078   <span class="comment">// Returns a const reference to the trip time table.</span>
<a name="l00079"></a>00079   <span class="keyword">const</span> <a class="code" href="classTripTime.html">TripTime</a>&amp; time() <span class="keyword">const</span>;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   <span class="comment">// Returns a write reference to the trip time table.</span>
<a name="l00082"></a>00082   <a class="code" href="classTripTime.html">TripTime</a>&amp; tripTime();
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="comment">// Returns a const reference to the trip id.</span>
<a name="l00085"></a>00085   <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; id() <span class="keyword">const</span>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="comment">// Returns a string representation of the trip.</span>
<a name="l00088"></a>00088   <span class="keywordtype">string</span> str() <span class="keyword">const</span>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090  <span class="keyword">private</span>:
<a name="l00091"></a>00091   <span class="keywordtype">string</span> _id;
<a name="l00092"></a>00092   <a class="code" href="classTripTime.html">TripTime</a> _time;
<a name="l00093"></a>00093   <span class="comment">// stop indices</span>
<a name="l00094"></a>00094   vector&lt;int&gt; _stops;
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">// A line is a collection of trips with the same stop sequence.</span>
<a name="l00098"></a><a class="code" href="classLine.html">00098</a> <span class="keyword">class </span><a class="code" href="classLine.html">Line</a> {
<a name="l00099"></a>00099  <span class="keyword">public</span>:
<a name="l00100"></a>00100   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> INFINITE;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="comment">// Returns the number of stops on the line&#39;s trips.</span>
<a name="l00103"></a>00103   <span class="keywordtype">int</span> size() <span class="keyword">const</span>;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <span class="comment">// Returns whether the trip shares the line&#39;s stop sequence.</span>
<a name="l00106"></a>00106   <span class="keywordtype">bool</span> candidate(<span class="keyword">const</span> <a class="code" href="classTrip.html">Trip</a>&amp; trip) <span class="keyword">const</span>;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="comment">// Adds a trip to the line, if the trip is suitable.</span>
<a name="l00109"></a>00109   <span class="comment">// Returns wether the trip was added.</span>
<a name="l00110"></a>00110   <span class="keywordtype">bool</span> addTrip(<span class="keyword">const</span> <a class="code" href="classTrip.html">Trip</a>&amp; trip);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="comment">// Returns a const reference to the stop indices.</span>
<a name="l00113"></a>00113   <span class="keyword">const</span> vector&lt;int&gt;&amp; stops() <span class="keyword">const</span>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">// Returns the stop index at given sequence position.</span>
<a name="l00116"></a>00116   <span class="keywordtype">int</span> stop(<span class="keyword">const</span> <span class="keywordtype">int</span> pos) <span class="keyword">const</span>;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   <span class="comment">// Returns the cost to travel from a stop dep to a stop dest starting at time.</span>
<a name="l00119"></a>00119   <span class="comment">// The total cost is waiting time + travel time in seconds.</span>
<a name="l00120"></a>00120   <span class="keywordtype">int</span> cost(<span class="keyword">const</span> <span class="keywordtype">int</span> dep, <span class="keyword">const</span> int64_t time, <span class="keyword">const</span> <span class="keywordtype">int</span> dest) <span class="keyword">const</span>;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="comment">// Return the next departure time from dep to dest after time.</span>
<a name="l00123"></a>00123   <span class="keywordtype">int</span> nextDeparture(<span class="keyword">const</span> <span class="keywordtype">int</span> dep, <span class="keyword">const</span> int64_t time, <span class="keyword">const</span> <span class="keywordtype">int</span> dest) <span class="keyword">const</span>;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="comment">// Returns a string representation of the line.</span>
<a name="l00126"></a>00126   <span class="keywordtype">string</span> str() <span class="keyword">const</span>;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128  <span class="keyword">private</span>:
<a name="l00129"></a>00129   set&lt;TripTime&gt; _tripTimes;
<a name="l00130"></a>00130   vector&lt;int&gt; _stops;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;
<a name="l00133"></a>00133   <span class="keywordtype">void</span> serialize(Archive&amp; ar, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> version) {  <span class="comment">// NOLINT</span>
<a name="l00134"></a>00134     ar &amp; _tripTimes;
<a name="l00135"></a>00135     ar &amp; _stops;
<a name="l00136"></a>00136   }
<a name="l00137"></a>00137   <span class="keyword">friend</span> <span class="keyword">class </span>boost::serialization::access;
<a name="l00138"></a>00138 };
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">// Utilities for trips and line construction.</span>
<a name="l00141"></a><a class="code" href="structLineFactory.html">00141</a> <span class="keyword">struct </span><a class="code" href="structLineFactory.html">LineFactory</a> {
<a name="l00142"></a>00142   <span class="comment">// Creates trips out of a list of times with corresponding stop indices, adds</span>
<a name="l00143"></a>00143   <span class="comment">// the trips to an existing collection of trips.</span>
<a name="l00144"></a>00144   <span class="keyword">static</span> <span class="keywordtype">void</span> createTrips(<span class="keyword">const</span> vector&lt;Int64Pair&gt;&amp; times,
<a name="l00145"></a>00145                           <span class="keyword">const</span> vector&lt;int&gt;&amp; stops,
<a name="l00146"></a>00146                           vector&lt;Trip&gt;* trips);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   <span class="comment">// Creates on trip out of a list</span>
<a name="l00149"></a>00149   <span class="keyword">static</span> <a class="code" href="classTrip.html">Trip</a> createTrip(<span class="keyword">const</span> vector&lt;Int64Pair&gt;&amp; times,
<a name="l00150"></a>00150                          <span class="keyword">const</span> vector&lt;int&gt;&amp; stops);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="comment">// Creates lines out of a list of trips.</span>
<a name="l00153"></a>00153   <span class="keyword">static</span> vector&lt;Line&gt; createLines(<span class="keyword">const</span> vector&lt;Trip&gt;&amp; trips);
<a name="l00154"></a>00154 };
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="preprocessor">#endif  // SRC_LINE_H_</span>
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Sat Aug 4 2012 05:25:42 for Transit Planner by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
